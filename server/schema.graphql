### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AddPostResponse {
  code: Int!
  message: String!
  post: Post
  success: Boolean!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""The custom type for the result of the `feedForYou` query"""
type FeedQueryResponse {
  """
  The ID of the last item in the current feed batch, used for cursor-based pagination
  """
  cursorId: Int

  """A list of posts for the feed"""
  posts: [Post]
}

type Follow {
  followedBy: User!
  followedById: Int!
  following: User!
  followingId: Int!
}

type FollowUserResponse {
  code: Int!
  following: User
  message: String!
  success: Boolean!
}

type Mutation {
  addpost(post: PostCreateInput): AddPostResponse
  followUser(followerId: Int!, followingId: Int!): FollowUserResponse
  unfollowUser(followerId: Int!, followingId: Int!): FollowUserResponse
}

type Post {
  author: User!
  body: String!
  createdAt: DateTime!
  id: ID!
  likeCount: Int
  parentPost: Post
  postImages: [PostImage!]
  replies: [Post]
  replyCount: Int
  repostCount: Int
  updatedAt: DateTime!
}

input PostCreateInput {
  authorId: Int!
  body: String!
  postImages: [PostImageCreateInput]
}

type PostImage {
  caption: String
  id: ID!
  post: Post!
  url: String!
}

input PostImageCreateInput {
  caption: String
  url: String!
}

type ProfileImage {
  id: ID!
  url: String!
  user: User
}

input ProfileImageCreateInput {
  id: ID!
  url: String!
}

type Query {
  feedFollowing(userId: Int): [Post]

  """Get all posts from all users"""
  feedForYou(
    """Number of posts to skip for pagination"""
    skip: Int
  ): FeedQueryResponse
  follows: [Follow!]
  postByUser(userId: Int): [Post]
  posts: [Post]
  profileImages: [ProfileImage!]!
  userById(id: Int): User
  userByUsername(username: String): User
  userProfileImage: ProfileImage!
  users: [User!]!
}

type User {
  bio: String
  followedBy: [User]
  followerCount: Int
  following: [User]
  followingCount: Int
  fullname: String
  id: ID!
  joinedOn: DateTime!
  postCount: Int
  posts: [Post]
  profileImage: ProfileImage
  username: String!
}

input UserCreateInput {
  bio: String
  followers: [UserCreateInput]
  following: [UserCreateInput]
  fullname: String
  posts: [PostCreateInput]
  profileImage: [ProfileImageCreateInput]
  username: String!
}